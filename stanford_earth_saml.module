<?php

/**
 * @file
 * Implements Drupal hooks for stanford_earth_saml module.
 */

use Drupal\user\UserInterface;

/**
 * Hook to specify if a SAML-authenticated user is allowed to login.
 *
 * Allows other modules to decide whether user with the given set of
 * attributes is allowed to log in via SSO or not.
 *
 * Each implementation should take care of displaying errors, there is no
 * message implementation at hook invocation. Implementations should return
 * a boolean indicating the success of the access check. Access will be denied
 * if any implementations return FALSE.
 *
 * @param array $attributes
 *   The SimpleSAMLphp attributes for this user.
 *
 * @return bool
 *   TRUE if SAML user is allowed to log in, FALSE if not.
 */
function stanford_earth_saml_simplesamlphp_auth_allow_login(array $attributes) {
  // Default is any valid user allowed unless workgroups or SUNets specified.
  $allowed = TRUE;
  $config = \Drupal::config('stanford_earth_saml.adminsettings');
  $sunet_str = trim($config->get('stanford_earth_saml_sunets'));
  $wg_str = trim($config->get('stanford_earth_saml_wgs'));
  // If either workgroups or SUNets are not empty, check them.
  if (!empty($sunet_str) || !empty($wg_str)) {
    $allowed = FALSE;
    if (!empty($wg_str)) {
      // See if the user is in any of our specified workgroups.
      $wg_array = preg_split('/\R/', $wg_str);
      if (isset($attributes['eduPersonEntitlement']) && is_array($attributes['eduPersonEntitlement'])) {
        $allowed = boolval(count(array_intersect($attributes['eduPersonEntitlement'], $wg_array)));
      }
    }
    // If no workgroups matched, then check SUNets.
    if (!$allowed && !empty($sunet_str)) {
      $sunet_array = preg_split('/\R/', $sunet_str);
      if (isset($attributes['uid']) && is_array($attributes['uid'])) {
        $allowed = boolval(count(array_intersect($attributes['uid'], $sunet_array)));
      }
    }
  }
  // Let the simplesamlphp_auth module know if the user is allowed to login.
  return $allowed;
}

/**
 * Hook to alter a Drupal user account after SAML authentication.
 *
 * We are using the simplesamlphp_auth role mapping to assign Drupal roles
 * based on entitlement attributes. However, that function only adds roles,
 * not delete roles, when the user logs in. This hook gets called after the
 * user logs in, but before the simplesamlphp_auth role mapping occurs, so
 * here we remove any roles specified in the role mapping. Those roles will
 * be added back when the role mapping routine is called.
 *
 * @param \Drupal\user\UserInterface $account
 *   The Drupal account that can be altered.
 * @param array $attributes
 *   The SimpleSAMLphp attributes for this user.
 *
 * @return \Drupal\user\UserInterface|bool
 *   The altered Drupal account or FALSE if nothing was changed.
 */
function stanford_earth_saml_simplesamlphp_auth_user_attributes(UserInterface $account, array $attributes) {
  $config = \Drupal::config('simplesamlphp_auth.settings');
  $saml_role_population_str = $config->get('role.population');
  $saml_roles = [];
  $rule_array = explode("|", $saml_role_population_str);
  foreach ($rule_array as $rule) {
    $role_array = explode(':', $rule);
    $saml_roles[] = $role_array[0];
  }
  $changed = FALSE;
  foreach ($saml_roles as $role) {
    if ($account->hasRole($role)) {
      $account->removeRole($role);
      $changed = TRUE;
    }
  }
  if ($changed) {
    return $account;
  }
  else {
    return FALSE;
  }
}
